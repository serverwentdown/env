# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

# font_family      IBM Plex Mono
# font_family      Source Code Pro
font_family      Fira Code
bold_font        Fira Code Bold
# bold_font        auto
italic_font      IBM Plex Mono Italic
# italic_font      auto
bold_italic_font IBM Plex Mono Bold Italic
# bold_italic_font auto

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: list-fonts` command. By default they are derived automatically, by
#: the OSes font system. Setting them manually is useful for font
#: families that have many weight variants like Book, Medium, Thick,
#: etc. For example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

font_size 11.0

#: Font size (in pts)

adjust_line_height  130%
# adjust_column_width 0

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).

# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols
symbol_map U+F641,U+F2B9,U+F2BB,U+F042,U+F5D0,U+F037,U+F039,U+F036,U+F038,U+F461,U+F0F9,U+F2A3,U+F13D,U+F103,U+F100,U+F101,U+F102,U+F107,U+F104,U+F105,U+F106,U+F556,U+F644,U+F5D1,U+F187,U+F557,U+F358,U+F359,U+F35A,U+F35B,U+F0AB,U+F0A8,U+F0A9,U+F0AA,U+F063,U+F060,U+F061,U+F062,U+F0B2,U+F337,U+F338,U+F2A2,U+F069,U+F1FA,U+F558,U+F5D2,U+F29E,U+F559,U+F77C,U+F77D,U+F55A,U+F04A,U+F7E5,U+E059,U+E05A,U+F666,U+F24E,U+F515,U+F516,U+F05E,U+F462,U+F02A,U+F0C9,U+F433,U+F434,U+F2CD,U+F244,U+F240,U+F242,U+F243,U+F241,U+F236,U+F0FC,U+F0F3,U+F1F6,U+F55B,U+F647,U+F206,U+F84A,U+F1E5,U+F780,U+F1FD,U+F517,U+F6B6,U+F29D,U+F781,U+F032,U+F0E7,U+F1E2,U+F5D7,U+F55C,U+F02D,U+F6B7,U+F7E6,U+F518,U+F5DA,U+F02E,U+F84C,U+F850,U+F853,U+F436,U+F466,U+F49E,U+E05B,U+F468,U+F2A1,U+F5DC,U+F7EC,U+F0B1,U+F469,U+F519,U+F51A,U+F55D,U+F188,U+F1AD,U+F0A1,U+F140,U+F46A,U+F207,U+F55E,U+F64A,U+F1EC,U+F133,U+F073,U+F274,U+F783,U+F272,U+F271,U+F273,U+F784,U+F030,U+F083,U+F6BB,U+F786,U+F55F,U+F46B,U+F1B9,U+F5DE,U+F5DF,U+F5E1,U+F5E4,U+F8FF,U+F0D7,U+F0D9,U+F0DA,U+F150,U+F191,U+F152,U+F151,U+F0D8,U+F787,U+F218,U+F217,U+F788,U+F6BE,U+F0A3,U+F6C0,U+F51B,U+F51C,U+F5E7,U+F1FE,U+F080,U+F201,U+F200,U+F00C,U+F058,U+F560,U+F14A,U+F7EF,U+F439,U+F43A,U+F43C,U+F43F,U+F441,U+F443,U+F445,U+F447,U+F13A,U+F137,U+F138,U+F139,U+F078,U+F053,U+F054,U+F077,U+F1AE,U+F51D,U+F111,U+F1CE,U+F64F,U+F7F2,U+F328,U+F46C,U+F46D,U+F017,U+F24D,U+F20A,U+F0C2,U+F381,U+F73B,U+F6C3,U+F73C,U+F73D,U+F740,U+F6C4,U+F743,U+F382,U+F561,U+F121,U+F126,U+F0F4,U+F013,U+F085,U+F51E,U+F0DB,U+F075,U+F27A,U+F651,U+F4AD,U+F7F5,U+F4B3,U+F086,U+F653,U+F51F,U+F14E,U+F066,U+F422,U+F78C,U+F562,U+F563,U+F564,U+F0C5,U+F1F9,U+F4B8,U+F09D,U+F125,U+F565,U+F654,U+F05B,U+F520,U+F521,U+F7F7,U+F1B2,U+F1B3,U+F0C4,U+F1C0,U+F2A4,U+F747,U+F108,U+F655,U+F470,U+F522,U+F6CF,U+F6D1,U+F523,U+F524,U+F525,U+F526,U+F527,U+F528,U+F566,U+F5EB,U+F7FA,U+F529,U+F567,U+F471,U+F6D3,U+F155,U+F472,U+F474,U+F4B9,U+F52A,U+F52B,U+F192,U+F4BA,U+F019,U+F568,U+F6D5,U+F5EE,U+F569,U+F56A,U+F6D7,U+F44B,U+F793,U+F794,U+F6D9,U+F044,U+F7FB,U+F052,U+F141,U+F142,U+F0E0,U+F2B6,U+F658,U+F199,U+F52C,U+F12D,U+F796,U+F153,U+F362,U+F12A,U+F06A,U+F071,U+F065,U+F424,U+F31E,U+F35D,U+F360,U+F06E,U+F1FB,U+F070,U+F863,U+F049,U+F050,U+E005,U+F1AC,U+F52D,U+F56B,U+F182,U+F0FB,U+F15B,U+F15C,U+F1C6,U+F1C7,U+F1C9,U+F56C,U+F6DD,U+F56D,U+F1C3,U+F56E,U+F1C5,U+F56F,U+F570,U+F571,U+F477,U+F478,U+F1C1,U+F1C4,U+F572,U+F573,U+F574,U+F1C8,U+F1C2,U+F575,U+F576,U+F008,U+F0B0,U+F577,U+F06D,U+F7E4,U+F134,U+F479,U+F578,U+F6DE,U+F024,U+F11E,U+F74D,U+F0C3,U+F579,U+F07B,U+F65D,U+F07C,U+F65E,U+F031,U+F44E,U+F04E,U+F52E,U+F119,U+F57A,U+F662,U+F1E3,U+F11B,U+F52F,U+F0E3,U+F3A5,U+F22D,U+F6E2,U+F06B,U+F79C,U+F79F,U+F000,U+F57B,U+F7A0,U+F530,U+F0AC,U+F57C,U+F57D,U+F57E,U+F7A2,U+F450,U+F664,U+F19D,U+F531,U+F532,U+F57F,U+F580,U+F581,U+F582,U+F583,U+F584,U+F585,U+F586,U+F587,U+F588,U+F589,U+F58A,U+F58B,U+F58C,U+F58D,U+F7A4,U+F7A5,U+F58E,U+F7A6,U+F0FD,U+F805,U+F6E3,U+F665,U+F4BD,U+F4BE,U+E05C,U+F4C0,U+F4C1,U+F258,U+F806,U+F256,U+F25B,U+F0A7,U+F0A5,U+F0A4,U+F0A6,U+F25A,U+F255,U+F257,U+E05D,U+F259,U+F4C2,U+F4C4,U+E05E,U+F2B5,U+E05F,U+E060,U+F6E6,U+F807,U+F292,U+F8C0,U+F8C1,U+F6E8,U+F0A0,U+E061,U+E062,U+E063,U+E064,U+F1DC,U+F025,U+F58F,U+F590,U+F004,U+F7A9,U+F21E,U+F533,U+F591,U+F6EC,U+F6ED,U+F1DA,U+F453,U+F7AA,U+F015,U+F6F0,U+F7AB,U+F0F8,U+F47D,U+F47E,U+F80D,U+F593,U+F80F,U+F594,U+F254,U+F253,U+F252,U+F251,U+F6F1,U+E065,U+F6F2,U+F246,U+F810,U+F7AD,U+F86D,U+F2C1,U+F2C2,U+F47F,U+F7AE,U+F03E,U+F302,U+F01C,U+F03C,U+F275,U+F534,U+F129,U+F05A,U+F033,U+F669,U+F595,U+F66A,U+F66B,U+F084,U+F11C,U+F66D,U+F596,U+F597,U+F598,U+F535,U+F66F,U+F1AB,U+F109,U+F5FC,U+E066,U+F812,U+F599,U+F59A,U+F59B,U+F59C,U+F5FD,U+F06C,U+F094,U+F536,U+F537,U+F3BE,U+F3BF,U+F1CD,U+F0EB,U+F0C1,U+F195,U+F03A,U+F022,U+F0CB,U+F0CA,U+F124,U+F023,U+F3C1,U+F309,U+F30A,U+F30B,U+F30C,U+F2A8,U+F59D,U+F604,U+E067,U+F0D0,U+F076,U+F674,U+F183,U+F279,U+F59F,U+F5A0,U+F041,U+F3C5,U+F276,U+F277,U+F5A1,U+F222,U+F227,U+F229,U+F22B,U+F22A,U+F6FA,U+F5A2,U+F0FA,U+F11A,U+F5A4,U+F5A5,U+F538,U+F676,U+F223,U+F753,U+F2DB,U+F130,U+F3C9,U+F539,U+F131,U+F610,U+F068,U+F056,U+F146,U+F7B5,U+F10B,U+F3CD,U+F0D6,U+F3D1,U+F53A,U+F53B,U+F53C,U+F53D,U+F5A6,U+F186,U+F5A7,U+F678,U+F21C,U+F6FC,U+F8CC,U+F245,U+F7B6,U+F001,U+F6FF,U+F22C,U+F1EA,U+F53E,U+F481,U+F247,U+F248,U+F613,U+F679,U+F700,U+F03B,U+F815,U+F1FC,U+F5AA,U+F53F,U+F482,U+F1D8,U+F0C6,U+F4CD,U+F1DD,U+F540,U+F5AB,U+F67B,U+F0EA,U+F04C,U+F28B,U+F1B0,U+F67C,U+F304,U+F305,U+F5AC,U+F5AD,U+F14B,U+F303,U+F5AE,U+E068,U+F4CE,U+F816,U+F295,U+F541,U+F756,U+F095,U+F879,U+F3DD,U+F098,U+F87B,U+F2A0,U+F87C,U+F4D3,U+F484,U+F818,U+F67F,U+F072,U+F5AF,U+F5B0,U+E069,U+F04B,U+F144,U+F1E6,U+F067,U+F055,U+F0FE,U+F2CE,U+F681,U+F682,U+F2FE,U+F75A,U+F619,U+F3E0,U+F154,U+F011,U+F683,U+F684,U+F5B1,U+F485,U+F486,U+F02F,U+F487,U+F542,U+E06A,U+E06B,U+F12E,U+F029,U+F128,U+F059,U+F458,U+F10D,U+F10E,U+F687,U+F7B9,U+F7BA,U+F75B,U+F074,U+F543,U+F8D9,U+F1B8,U+F01E,U+F2F9,U+F25D,U+F87D,U+F3E5,U+F122,U+F75E,U+F7BD,U+F079,U+F4D6,U+F70B,U+F018,U+F544,U+F135,U+F4D7,U+F09E,U+F143,U+F158,U+F545,U+F546,U+F547,U+F548,U+F70C,U+F156,U+F5B3,U+F5B4,U+F7BF,U+F7C0,U+F0C7,U+F549,U+F54A,U+F70E,U+F7C2,U+F002,U+F688,U+F689,U+F010,U+F00E,U+F4D8,U+F233,U+F61F,U+F064,U+F1E0,U+F1E1,U+F14D,U+F20B,U+F3ED,U+E06C,U+F21A,U+F48B,U+F54B,U+F290,U+F291,U+F07A,U+F2CC,U+F5B6,U+F4D9,U+F2F6,U+F2A7,U+F2F5,U+F012,U+F5B7,U+F7C4,U+E06D,U+F0E8,U+F7C5,U+F7C9,U+F7CA,U+F54C,U+F714,U+F715,U+F7CC,U+F1DE,U+F118,U+F5B8,U+F4DA,U+F75F,U+F48D,U+F54D,U+F7CD,U+F7CE,U+F2DC,U+F7D0,U+F7D2,U+E06E,U+F696,U+F5BA,U+F0DC,U+F15D,U+F881,U+F15E,U+F882,U+F160,U+F884,U+F161,U+F885,U+F0DD,U+F162,U+F886,U+F163,U+F887,U+F0DE,U+F5BB,U+F197,U+F891,U+F717,U+F110,U+F5BC,U+F5BD,U+F0C8,U+F45C,U+F698,U+F5BF,U+F005,U+F699,U+F089,U+F5C0,U+F69A,U+F621,U+F048,U+F051,U+F0F1,U+F249,U+F04D,U+F28D,U+F2F2,U+E06F,U+F54E,U+F54F,U+E070,U+E071,U+F550,U+F21D,U+F0CC,U+F551,U+F12C,U+F239,U+F0F2,U+F5C1,U+F185,U+F12B,U+F5C2,U+F5C3,U+F5C4,U+F5C5,U+F69B,U+F021,U+F2F1,U+F48E,U+F0CE,U+F45D,U+F10A,U+F3FA,U+F490,U+F3FD,U+F02B,U+F02C,U+F4DB,U+F0AE,U+F1BA,U+F62E,U+F62F,U+F769,U+F76B,U+F7D7,U+F120,U+F034,U+F035,U+F00A,U+F009,U+F00B,U+F630,U+F491,U+F2CB,U+F2C7,U+F2C9,U+F2CA,U+F2C8,U+F165,U+F164,U+F08D,U+F3FF,U+F00D,U+F057,U+F043,U+F5C7,U+F5C8,U+F204,U+F205,U+F7D8,U+F71E,U+E072,U+F552,U+F7D9,U+F5C9,U+F6A0,U+F6A1,U+F722,U+F25C,U+F637,U+E041,U+F238,U+F7DA,U+F224,U+F225,U+F1F8,U+F2ED,U+F829,U+F82A,U+F1BB,U+F091,U+F0D1,U+F4DE,U+F63B,U+F4DF,U+F63C,U+F553,U+F1E4,U+F26C,U+F0E9,U+F5CA,U+F0CD,U+F0E2,U+F2EA,U+F29A,U+F19C,U+F127,U+F09C,U+F13E,U+F093,U+F007,U+F406,U+F4FA,U+F4FB,U+F4FC,U+F2BD,U+F4FD,U+F4FE,U+F4FF,U+F500,U+F501,U+F728,U+F502,U+F0F0,U+F503,U+F504,U+F82F,U+F234,U+F21B,U+F505,U+F506,U+F507,U+F508,U+F235,U+F0C0,U+F509,U+E073,U+F2E5,U+F2E7,U+F5CB,U+F221,U+F226,U+F228,U+E085,U+E086,U+F492,U+F493,U+F03D,U+F4E2,U+F6A7,U+E074,U+E075,U+E076,U+F897,U+F45F,U+F027,U+F6A9,U+F026,U+F028,U+F772,U+F729,U+F554,U+F555,U+F494,U+F773,U+F83E,U+F496,U+F5CD,U+F193,U+F1EB,U+F72E,U+F410,U+F2D0,U+F2D1,U+F2D2,U+F72F,U+F4E3,U+F5CE,U+F159,U+F0AD,U+F497,U+F157,U+F6AD Font Awesome 5 Free
symbol_map U+F26E,U+F368,U+F369,U+F6AF,U+F170,U+F36A,U+F36B,U+F834,U+F36C,U+F642,U+F270,U+F42C,U+F36D,U+F17B,U+F209,U+F36E,U+F420,U+F36F,U+F370,U+F371,U+F179,U+F415,U+F77A,U+F372,U+F77B,U+F373,U+F41C,U+F374,U+F421,U+F375,U+F2D5,U+F835,U+F1B4,U+F1B5,U+F378,U+F171,U+F379,U+F37A,U+F27E,U+F37B,U+F37C,U+F37D,U+F293,U+F294,U+F836,U+F15A,U+F837,U+F37F,U+F8A6,U+F20D,U+F785,U+F42D,U+F1F3,U+F416,U+F24C,U+F1F2,U+F24B,U+F1F1,U+F1F4,U+F1F5,U+F1F0,U+F380,U+F789,U+F268,U+F838,U+E07D,U+F383,U+F384,U+F385,U+F1CB,U+F284,U+F78D,U+F20E,U+F26D,U+F89E,U+F388,U+F25E,U+F4E7,U+F4E8,U+F4E9,U+F4EA,U+F4EB,U+F4EC,U+F4ED,U+F4EE,U+F4EF,U+F4F0,U+F4F1,U+F4F2,U+F4F3,U+F6C9,U+F13C,U+F38B,U+F38C,U+F38D,U+F6CA,U+E052,U+F210,U+E077,U+F1A5,U+F38E,U+F38F,U+F6CC,U+F1BD,U+F790,U+F791,U+F1A6,U+F391,U+F392,U+F393,U+F394,U+F395,U+F396,U+F17D,U+F397,U+F16B,U+F1A9,U+F399,U+F39A,U+F4F4,U+F282,U+E078,U+F430,U+F5F1,U+F423,U+F1D1,U+F299,U+F39D,U+F42E,U+F2D7,U+F839,U+F23E,U+F09A,U+F39E,U+F39F,U+F082,U+F6DC,U+F797,U+F798,U+F799,U+F269,U+E007,U+F2B0,U+F50A,U+F3A1,U+F16E,U+F44D,U+F417,U+F2B4,U+F35C,U+F425,U+F4E6,U+F280,U+F3A2,U+F286,U+F3A3,U+F211,U+F180,U+F2C5,U+F3A4,U+F50B,U+F50C,U+F50D,U+F265,U+F260,U+F261,U+F1D3,U+F841,U+F1D2,U+F09B,U+F113,U+F092,U+F3A6,U+F296,U+F426,U+F2A5,U+F2A6,U+F3A7,U+F3A8,U+F3A9,U+F1A0,U+F3AA,U+E079,U+F3AB,U+F2B3,U+F0D5,U+F0D4,U+F1EE,U+F184,U+F2D6,U+F3AC,U+F3AD,U+E07E,U+F3AE,U+F1D4,U+F3AF,U+F5F7,U+F452,U+F3B0,U+E07F,U+F427,U+F592,U+F3B1,U+F27C,U+F13B,U+F3B2,U+E013,U+F2D8,U+E080,U+F16D,U+E055,U+E081,U+F7AF,U+F26B,U+F7B0,U+F208,U+F83A,U+F3B4,U+F3B5,U+F4E4,U+F50E,U+F3B6,U+F7B1,U+F3B7,U+F1AA,U+F3B8,U+F3B9,U+F1CC,U+F5FA,U+F4F5,U+F3BA,U+F3BB,U+F3BC,U+F42F,U+F3BD,U+F202,U+F203,U+F212,U+F41D,U+F3C0,U+F08C,U+F0E1,U+F2B8,U+F17C,U+F3C3,U+F3C4,U+F59E,U+F50F,U+F60F,U+F4F6,U+F136,U+F8CA,U+F3C6,U+F23A,U+F3C7,U+F3C8,U+F2E0,U+F5A3,U+F7B3,U+E01A,U+F3CA,U+F3CB,U+F289,U+E056,U+F3CC,U+F285,U+F3D0,U+F3D2,U+F612,U+F5A8,U+F419,U+F3D3,U+F3D4,U+F3D5,U+F3D6,U+E082,U+F263,U+F264,U+F510,U+F23D,U+F19B,U+F26A,U+F23C,U+F8D2,U+F41A,U+F3D7,U+F18C,U+F3D8,U+F3D9,U+F1ED,U+F704,U+E083,U+F3DA,U+F3DB,U+F3DC,U+F511,U+F457,U+F2AE,U+F1A8,U+F4E5,U+F1A7,U+E01E,U+F0D2,U+F231,U+F0D3,U+F3DF,U+F288,U+F3E1,U+F3E2,U+F1D6,U+F459,U+F2C4,U+F4F7,U+F7BB,U+F2D9,U+F41B,U+F75D,U+F4D5,U+F1D0,U+F3E3,U+F1A1,U+F281,U+F1A2,U+F7BC,U+F18B,U+F3E6,U+F4F8,U+F3E7,U+F5B2,U+F3E8,U+F3E9,U+E07A,U+F267,U+F83B,U+F41E,U+F3EA,U+F28A,U+F3EB,U+F2DA,U+F213,U+F3EC,U+F214,U+E057,U+F5B5,U+F215,U+F3EE,U+F512,U+F7C6,U+F216,U+F17E,U+F198,U+F3EF,U+F1E7,U+F2AB,U+F2AC,U+F2AD,U+F1BE,U+F7D3,U+F3F3,U+F83C,U+F1BC,U+F5BE,U+F18D,U+F16C,U+F842,U+F3F5,U+F1B6,U+F1B7,U+F3F6,U+F3F7,U+F428,U+F429,U+F42A,U+F3F8,U+F1A4,U+F1A3,U+F2DD,U+F3F9,U+F7D6,U+F8E1,U+F83D,U+F4F9,U+F2C6,U+F3FE,U+F1D5,U+F69D,U+F5C6,U+F2B2,U+F731,U+E07B,U+F513,U+F181,U+F173,U+F174,U+F1E8,U+F099,U+F081,U+F42B,U+F402,U+F7DF,U+F403,U+F8E8,U+E084,U+F404,U+E049,U+E07C,U+F405,U+F7E0,U+F287,U+F7E1,U+F407,U+F408,U+F237,U+F2A9,U+F2AA,U+F409,U+F40A,U+F194,U+F27D,U+F1CA,U+F189,U+F40B,U+F41F,U+E087,U+F83F,U+F5CC,U+F18A,U+F1D7,U+F232,U+F40C,U+F40D,U+F266,U+F17A,U+F5CF,U+F730,U+E088,U+F514,U+F19A,U+F411,U+F297,U+F2DE,U+F298,U+F3E4,U+F412,U+F168,U+F169,U+F23B,U+F19E,U+F840,U+F413,U+F414,U+F7E3,U+F1E9,U+F2B1,U+F167,U+F431,U+F63F Font Awesome 5 Brands

#: Map the specified unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each unicode code
#: point is specified in the form U+<code point in hexadecimal>. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. symbol_map itself can be specified multiple
#: times. Syntax is::

#:     symbol_map codepoints Font Family Name

# disable_ligatures never

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them.  You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

# box_drawing_scale 0.001, 1, 1.5, 2

#: Change the sizes of the lines used for the box drawing unicode
#: characters These values are in pts. They will be scaled by the
#: monitor DPI to arrive at a pixel value. There must be four values
#: corresponding to thin, normal, thick, and very thick lines.

#: }}}

#: Cursor customization {{{

# cursor #cccccc

#: Default cursor color

# cursor_text_color #111111

#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background

# cursor_shape block

#: The cursor shape can be one of (block, beam, underline)

cursor_blink_interval 0

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Negative values mean use system default. Note
#: that numbers smaller than repaint_delay will be limited to
#: repaint_delay.

# cursor_stop_blinking_after 15.0

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity.  Set to zero to never stop blinking.

#: }}}

#: Scrollback {{{

scrollback_lines 4000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down resizing of the terminal and also
#: use large amounts of RAM.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen.

# scrollback_pager_history_size 0

#: Separate scrollback history size, used only for browsing the
#: scrollback buffer (in MB). This separate buffer is not available
#: for interactive scrolling but will be piped to the pager program
#: when viewing scrollback buffer in a separate window. The current
#: implementation stores one character in 4 bytes, so approximatively
#: 2500 lines per megabyte at 100 chars per line. A value of zero or
#: less disables this feature. The maximum allowed size is 4GB.

# wheel_scroll_multiplier 5.0

#: Modify the amount scrolled by the mouse wheel. Note this is only
#: used for low precision scrolling devices, not for high precision
#: scrolling on platforms such as macOS and Wayland. Use negative
#: numbers to change scroll direction.

# touch_scroll_multiplier 1.0

#: Modify the amount scrolled by a touchpad. Note this is only used
#: for high precision scrolling devices on platforms such as macOS and
#: Wayland. Use negative numbers to change scroll direction.

#: }}}

#: Mouse {{{

mouse_hide_wait 0.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text.

# url_color #0087bd
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

# open_url_modifiers kitty_mod

#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL

# open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.

# copy_on_select no

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, simply selecting text with the mouse will cause the text
#: to be copied to clipboard. Useful on platforms such as macOS that
#: do not have the concept of primary selections. You can instead
#: specify a name such as a1 to copy to a private kitty buffer
#: instead. Map a shortcut with the paste_from_buffer action to paste
#: from this private buffer. For example::

#:     map cmd+shift+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

# rectangle_select_modifiers ctrl+alt

#: The modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)

# terminal_select_modifiers shift

#: The modifiers to override mouse selection even when a terminal
#: application has grabbed the mouse

# select_by_word_characters :@-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the unicode database will be matched.

# click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around

# pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse.

#: }}}

#: Performance tuning {{{

# repaint_delay 10

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate. Also, to minimize latency when there is pending input to be
#: processed, repaint_delay is ignored.

# input_delay 3

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

#: }}}

#: Terminal bell {{{

# enable_audio_bell yes

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

# visual_bell_duration 0.0

#: Visual bell duration. Flash the screen when a bell occurs for the
#: specified number of seconds. Set to zero to disable.

# window_alert_on_bell yes

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.

# bell_on_tab yes

#: Show a bell symbol on the tab if a bell occurs in one of the
#: windows in the tab and the window is not the currently focused
#: window

# command_on_bell none

#: Program to run when a bell occurs.

#: }}}

#: Window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

# enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. For a list of available
#: layouts, see the
#: https://sw.kovidgoyal.net/kitty/index.html#layouts.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: The step size (in units of cell width/cell height) to use when
#: resizing windows. The cells value is used for horizontal resizing
#: and the lines value for vertical resizing.

# window_border_width 1.0

#: The width (in pts) of window borders. Will be rounded to the
#: nearest number of pixels based on screen resolution. Note that
#: borders are displayed only when more than one window is visible.
#: They are meant to separate multiple windows.

# draw_minimal_borders yes

#: Draw only the minimum borders needed. This means that only the
#: minimum needed borders for inactive windows are drawn. That is only
#: the borders that separate the inactive window from a neighbor. Note
#: that setting a non-zero window margin overrides this and causes all
#: borders to be drawn.

window_margin_width 12.0

#: The window margin (in pts) (blank area outside the border)

# single_window_margin_width -1000.0

#: The window margin (in pts) to use when only a single window is
#: visible. Negative values will cause the value of
#: window_margin_width to be used instead.

# window_padding_width 8.0

#: The window padding (in pts) (blank area between the text and the
#: window border)

# placement_strategy center

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be on
#: only the bottom and right edges.

# active_border_color #00ff00

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

# inactive_border_color #cccccc

#: The color for the border of inactive windows

# bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred

# inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

hide_window_decorations yes

#: Hide the window decorations (title-bar and window borders). Whether
#: this works and exactly what effect it has depends on the window
#: manager/operating system.

# resize_debounce_time 0.1

#: The time (in seconds) to wait before redrawing the screen when a
#: resize event is received. On platforms such as macOS, where the
#: operating system sends events corresponding to the start and end of
#: a resize, this number is ignored.

# resize_draw_strategy static

#: Choose how kitty draws a window while a resize is in progress. A
#: value of static means draw the current window contents, mostly
#: unchanged. A value of scale means draw the current window contents
#: scaled. A value of blank means draw a blank window. A value of size
#: means show the window size in cells.

#: }}}

#: Tab bar {{{

# tab_bar_edge bottom

#: Which edge to show the tab bar on, top or bottom

tab_bar_margin_width 12.0

#: The margin to the left and right of the tab bar (in pts)

# tab_bar_style fade

#: The tab bar style, can be one of: fade, separator or hidden. In the
#: fade style, each tab's edges fade into the background color, in the
#: separator style, tabs are separated by a configurable separator.

# tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown

# tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " ┇"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

# tab_title_template {title}

#: A template to render the tab title. The default just renders the
#: title. If you wish to include the tab-index as well, use something
#: like: {index}: {title}. Useful if you have shortcuts mapped for
#: goto_tab N.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles

#: }}}

#: Color scheme {{{

# foreground #dddddd
# background #000000

#: The foreground and background colors

background_opacity 0.875

#: The opacity of the background. A number between 0 and 1, where 1 is
#: opaque and 0 is fully transparent.  This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the default background color's
#: opacity. This is so that things like the status bar in vim,
#: powerline prompts, etc. still look good.  But it means that if you
#: use a color theme with a background color in your editor, it will
#: not be rendered as transparent.  Instead you should change the
#: default background color in your kitty config and not use a
#: background color in the editor color scheme. Or use the escape
#: codes to set the terminals default colors in a shell script to
#: launch your editor.  Be aware that using a value less than 1.0 is a
#: (possibly significant) performance hit.  If you want to dynamically
#: change transparency of windows set dynamic_background_opacity to
#: yes (this is off by default as it has a performance cost)

# dynamic_background_opacity no

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.

# dim_opacity 0.75

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground #000000

#: The foreground for text selected with the mouse. A value of none
#: means to leave the color unchanged.

# selection_background #fffacd

#: The background for text selected with the mouse.


#: The 16 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version. You can also set the remaining colors from
#: the 256 color table as color16 to color255.

# color0 #000000
# color8 #767676

#: black

# color1 #cc0403
# color9 #f2201f

#: red

# color2  #19cb00
# color10 #23fd00

#: green

# color3  #cecb00
# color11 #fffd00

#: yellow

# color4  #0d73cc
# color12 #1a8fff

#: blue

# color5  #cb1ed1
# color13 #fd28ff

#: magenta

# color6  #0dcdcd
# color14 #14ffff

#: cyan

# color7  #dddddd
# color15 #ffffff

#: white

#: }}}

#: Advanced {{{

# shell .

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login to ensure that the shell starts in interactive mode and
#: reads its startup rc files.

# editor .

#: The console editor to use when editing the kitty config file or
#: similar tasks. A value of . means to use the environment variable
#: EDITOR. Note that this environment variable has to be set not just
#: in your shell startup scripts but system-wide, otherwise kitty will
#: not see it.

# close_on_child_death no

#: Close the window when the child process (shell) exits. If no (the
#: default), the terminal will remain open when the child exits as
#: long as there are still processes outputting to the terminal (for
#: example disowned or backgrounded processes). If yes, the window
#: will close as soon as the child process exits. Note that setting it
#: to yes means that any background processes still using the terminal
#: can fail silently because their stdout/stderr/stdin no longer work.

allow_remote_control yes

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over ssh
#: connections.

# env 

#: Specify environment variables to set in all child processes. Note
#: that environment variables are expanded recursively, so if you
#: use::

#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b

#: The value of MYVAR2 will be a/<path to home directory>/b.

# update_check_interval 24

#: Periodically check if an update to kitty is available. If an update
#: is found a system notification is displayed informing you of the
#: available update. The default is to check every 24 hrs, set to zero
#: to disable.

# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded.

# clipboard_control write-clipboard write-primary

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary. You can additionally specify no-append to
#: disable kitty's protocol extension for clipboard concatenation. The
#: default is to allow writing to the clipboard and primary selection
#: with concatenation enabled. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work.

#: }}}

#: OS specific tweaks {{{

# macos_titlebar_color system

#: Change the color of the kitty window's titlebar on macOS. A value
#: of system means to use the default system color, a value of
#: background means to use the background color of the currently
#: active window and finally you can use an arbitrary color, such as
#: #12af59 or red. WARNING: This option works by using a hack, as
#: there is no proper Cocoa API for it. It sets the background color
#: of the entire window and makes the titlebar transparent. As such it
#: is incompatible with background_opacity. If you want to use both,
#: you are probably better off just hiding the titlebar with
#: hide_window_decorations.

# macos_option_as_alt no

#: Use the option key as an alt key. With this set to no, kitty will
#: use the macOS native Option+Key = unicode character behavior. This
#: will break any Alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macOS unicode input technique. You
#: can use the values: left, right, or both to use only the left,
#: right or both Option keys as Alt, instead.

# macos_hide_from_tasks no

#: Hide the kitty window from running tasks (Option+Tab) on macOS.

# macos_quit_when_last_window_closed no

#: Have kitty quit when all the top-level windows are closed. By
#: default, kitty will stay running, even with no open windows, as is
#: the expected behavior on macOS.

# macos_window_resizable yes

#: Disable this if you want kitty top-level (OS) windows to not be
#: resizable on macOS.

# macos_thicken_font 0.15

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes. For example, a value of
#: 0.75 will result in rendering that looks similar to sub-pixel
#: antialiasing at common font sizes.

# macos_traditional_fullscreen no

#: Use the traditional full-screen transition, that is faster, but
#: less pretty.

macos_show_window_title_in window

#: Show or hide the window title in the macOS window or menu-bar. A
#: value of window will show the title of the currently active window
#: at the top of the macOS window. A value of menubar will show the
#: title of the currently active window in the macOS menu-bar, making
#: use of otherwise wasted space. all will show the title everywhere
#: and none hides the title in the window and the menu-bar.

# macos_custom_beam_cursor no

#: Enable/disable custom mouse cursor for macOS that is easier to see
#: on both light and dark backgrounds. WARNING: this might make your
#: mouse cursor invisible on dual GPU machines.

# linux_display_server auto

#: Choose between Wayland and X11 backends. By default, an appropriate
#: backend based on the system state is chosen automatically. Set it
#: to x11 or wayland to force the choice.

#: }}}

#: Keyboard shortcuts {{{

#: For a list of key names, see: GLFW keys
#: <https://www.glfw.org/docs/latest/group__keys.html>. The name to
#: use is the part after the GLFW_KEY_ prefix. For a list of modifier
#: names, see: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you should only use an XKB key
#: name for keys that are not present in the list of GLFW keys.

#: Finally, you can use raw system key codes to map keys. To see the
#: system key code for a key, start kitty with the kitty --debug-
#: keyboard option. Then kitty will output some debug text for every
#: key event. In that text look for ``native_code`` the value of that
#: becomes the key name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

# kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# clear_all_shortcuts no

#: You can have kitty remove all shortcut definition seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

# kitten_alias hints hints --hints-offset=0

#: You can create aliases for kitten names, this allows overriding the
#: defaults for kitten options and can also be used to shorten
#: repeated mappings of the same kitten with a specific group of
#: options. For example, the above alias changes the default value of
#: kitty +kitten hints --hints-offset to zero for all mappings,
#: including the builtin ones.

#: Clipboard {{{

# map kitty_mod+c copy_to_clipboard

#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise.

# map cmd+c        copy_to_clipboard
# map kitty_mod+v  paste_from_clipboard
# map cmd+v        paste_from_clipboard
# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection
# map kitty_mod+o  pass_selection_to_program

#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, the selection
#: will be passed as a command line argument to the program, for
#: example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

# map kitty_mod+up        scroll_line_up
# map alt+cmd+page_up     scroll_line_up
# map cmd+up              scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map alt+cmd+page_down   scroll_line_down
# map cmd+down            scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map cmd+page_up         scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map cmd+page_down       scroll_page_down
# map kitty_mod+home      scroll_home
# map cmd+home            scroll_home
# map kitty_mod+end       scroll_end
# map cmd+end             scroll_end
# map kitty_mod+h         show_scrollback

#: You can pipe the contents of the current screen + history buffer as
#: STDIN to an arbitrary program using the ``pipe`` function. For
#: example, the following opens the scrollback buffer in less in an
#: overlay window::

#:     map f1 pipe @ansi overlay less +G -R

#: For more details on piping screen and buffer contents to external
#: programs, see pipe.

#: }}}

#: Window management {{{

# map kitty_mod+enter new_window

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      new_window mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    new_window_with_cwd

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter new_window @ some_program

#: You can open a new window next to the currently active window or as
#: the first window, with::

#:     map ctrl+n new_window !neighbor some_program
#:     map ctrl+f new_window !first some_program

# map cmd+enter   new_window
# map kitty_mod+n new_os_window

#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.

# map cmd+n       new_os_window
# map kitty_mod+w close_window
# map shift+cmd+d close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window
# map kitty_mod+1 first_window
# map cmd+1       first_window
# map kitty_mod+2 second_window
# map cmd+2       second_window
# map kitty_mod+3 third_window
# map cmd+3       third_window
# map kitty_mod+4 fourth_window
# map cmd+4       fourth_window
# map kitty_mod+5 fifth_window
# map cmd+5       fifth_window
# map kitty_mod+6 sixth_window
# map cmd+6       sixth_window
# map kitty_mod+7 seventh_window
# map cmd+7       seventh_window
# map kitty_mod+8 eighth_window
# map cmd+8       eighth_window
# map kitty_mod+9 ninth_window
# map cmd+9       ninth_window
# map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

# map kitty_mod+right next_tab
# map ctrl+tab        next_tab
# map shift+cmd+]     next_tab
# map kitty_mod+left  previous_tab
# map shift+ctrl+tab  previous_tab
# map shift+cmd+[     previous_tab
# map kitty_mod+t     new_tab
# map cmd+t           new_tab
# map kitty_mod+q     close_tab
# map cmd+w           close_tab
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

map kitty_mod+f>plus     change_font_size all +2.0
# map cmd+plus            change_font_size all +2.0
map kitty_mod+f>minus     change_font_size all -2.0
# map cmd+minus           change_font_size all -2.0
map kitty_mod+f>backspace change_font_size all 0
# map cmd+0               change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen::

#:     map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

# }}}

include colorscheme.greyscale-dark.conf
include colorscheme.conf
